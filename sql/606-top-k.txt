-------------------------------------------------------------
-- cs7240 Principles of scalable data management
-- https://northeastern-datalab.github.io/cs7240/
-- Wolfgang Gatterbauer
-- 
-- Minimal example that joins two queries to get top-1:
-- "naive": standard conjunctive queries with limit 1
-- with some cleverer execution strategy
-- Output timing in msec
-- Example: 2908 msec for naive, 4 msec for cleverer execution strategy, on 2016 MacBook Pro
-------------------------------------------------------------



-------------------------
-- Drop tables if they already exist
-------------------------

DROP TABLE IF EXISTS R;
DROP TABLE IF EXISTS S;


---------------------------
-- Create the tables
---------------------------

create table R ( 
	A int,
	B int,
	W int); 

create table S ( 
	B int,
	C int,
	W int); 


---------------------------
-- Create function to populate the tables
---------------------------
CREATE OR REPLACE FUNCTION addTuples(	
	Relation_name varchar,
	Att0 varchar, 
	Att1 varchar, 
	n int)
RETURNS void 
LANGUAGE plpgsql
as
$func$
DECLARE
	i int;

BEGIN
i = 1;

WHILE i <= n LOOP
	EXECUTE 'INSERT INTO ' || Relation_name || '(' || Att1 || ',' || Att0 || ', W) VALUES ('  || i || ', 0 ,' || i || ');';
    i := i + 1;
END LOOP;

END;
$func$;


---------------------------
-- Populate the tables
---------------------------
SELECT addTuples('R','B','A', 1000);
SELECT addTuples('S','B','C', 1000);



---------------------------
-- Create function to time the queries
---------------------------
CREATE OR REPLACE FUNCTION timing()
RETURNS TABLE(naive_msec int, with_SJ_msec int)
LANGUAGE plpgsql
as

$func$
DECLARE
	time1 int;
	time2 int;	
	StartTime timestamptz;
	EndTime timestamptz;	
	record1 record;
	record2 record;	

BEGIN

StartTime := clock_timestamp();

	---------------------------
	-- Query 1
	---------------------------
	SELECT   A, R.B, S.C,
	        	R.W + S.W as weight
	INTO record1				
	FROM     R, S
	WHERE	R.B=S.B
	ORDER BY weight ASC
	LIMIT	1;

EndTime := clock_timestamp();
time1 :=  (1000*(extract(epoch from EndTime)-extract(epoch from StartTime)))::int;

StartTime := clock_timestamp();

	---------------------------
	-- Query 2
	---------------------------
	SELECT R.A, X.B, S.C, X.W as weight
	INTO record2
	FROM R, S,
		(SELECT T1.B, W1, W2, W1+W2 W
		FROM
			(SELECT B, MIN(W) W1
			FROM R
			GROUP BY B) T1,
			(SELECT B, MIN(W) W2
			FROM S
			GROUP BY B) T2
		WHERE T1.B = T2.B
		ORDER BY W ASC
		LIMIT 1) X
	WHERE X.B = R.B
	AND X.W1 = R.W
	AND X.B = S.B
	AND X.W2 = S.W
	LIMIT	1;	
	
EndTime := clock_timestamp();
time2 :=  (1000*(extract(epoch from EndTime)-extract(epoch from StartTime)))::int;

RETURN QUERY SELECT time1, time2;

END;
$func$;


---------------------------
-- Run the timing experiment
---------------------------
SELECT * FROM timing()




