-------------------------------------------------------------
-- cs7240 Principles of scalable data management
-- https://northeastern-datalab.github.io/cs7240/
-- 
-- Minimal example that counts the joins across two tables:
-- "naive": standard conjunctive query with count(*)
-- "optimized": calculating count(*) for each table, then multiplying the paths

-- Output timing in msec (and count(*))
-------------------------------------------------------------



-------------------------
-- Drop tables if they already exist
-------------------------

DROP TABLE IF EXISTS R;
DROP TABLE IF EXISTS S;
drop FUNCTION IF EXISTS addTuples();
drop FUNCTION IF EXISTS timing();


---------------------------
-- Create the tables
---------------------------

create table R ( 
	A int,
	B int,
	W int); 

create table S ( 
	B int,
	C int,
	W int); 


---------------------------
-- Create function to populate the tables
---------------------------
CREATE OR REPLACE FUNCTION addTuples(	
	Relation_name varchar,
	Att0 varchar, 
	Att1 varchar, 
	n int,
	m int)
RETURNS void 
LANGUAGE plpgsql
as
$func$
DECLARE
	i int;
	j int;

BEGIN
j = 0;

WHILE j < m LOOP
	i = 1;
	WHILE i <= n LOOP
		EXECUTE 'INSERT INTO ' || Relation_name || '(' || Att1 || ',' || Att0 || ', W) VALUES ('  || i || ','  || j || ',' || i || ');';
	    i := i + 1;
	END LOOP;
	j := j + 1;
END LOOP;

END;
$func$;


---------------------------
-- Populate the tables
---------------------------
SELECT addTuples('R','B','A', 1000, 1);
SELECT addTuples('S','B','C', 1000, 1);




---------------------------
-- Create function to time the queries
---------------------------
CREATE OR REPLACE FUNCTION timing()
RETURNS TABLE(naive_msec int, optimized_msec int, count_naive varchar, count_optimized varchar)
LANGUAGE plpgsql
as

$func$
DECLARE
	time1 int;
	time2 int;	
	StartTime timestamptz;
	EndTime timestamptz;	
	record1 record;
	record2 record;	
	count1 varchar;
	count2 varchar;	

BEGIN

StartTime := clock_timestamp();

	---------------------------
	-- Query 1
	---------------------------
	SELECT   count(*) C
	INTO record1				
	FROM     R, S
	WHERE	R.B=S.B;

EndTime := clock_timestamp();
time1 :=  (1000*(extract(epoch from EndTime)-extract(epoch from StartTime)))::int;

count1 := record1;

StartTime := clock_timestamp();

	---------------------------
	-- Query 2
	---------------------------
	SELECT SUM(C) as C
	INTO record2
	FROM 
		(SELECT T1.B, C1, C2, C1*C2 C
		FROM
			(SELECT B, COUNT(*) C1
			FROM R
			GROUP BY B) T1,
			(SELECT B, COUNT(*) C2
			FROM S
			GROUP BY B) T2
		WHERE T1.B = T2.B) X;	
	
EndTime := clock_timestamp();
time2 :=  (1000*(extract(epoch from EndTime)-extract(epoch from StartTime)))::int;

count2 := record2;

RETURN QUERY SELECT time1, time2, count1, count2;

END;
$func$;


---------------------------
-- Run the timing experiment
---------------------------
SELECT * FROM timing();




